'use client';

import { useState, useEffect, useContext, createContext } from 'react';
import { useRouter } from 'next/navigation';
import type { SessionUser } from '~/lib/auth';

interface AuthContextType {
    user: SessionUser | null;
    loading: boolean;
    login: (email: string, password: string) => Promise<{ success: boolean; error?: string }>;
    register: (email: string, password: string, name?: string) => Promise<{ success: boolean; error?: string }>;
    logout: () => Promise<void>;
    isAuthenticated: boolean;
    isAdmin: boolean;
    canEdit: boolean;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export function useAuth() {
    const context = useContext(AuthContext);
    if (context === undefined) {
        throw new Error('useAuth must be used within an AuthProvider');
    }
    return context;
}

export function AuthProvider({ children }: { children: React.ReactNode }) {
    const [user, setUser] = useState<SessionUser | null>(null);
    const [loading, setLoading] = useState(true);
    const router = useRouter();

    useEffect(() => {
        checkAuth();
    }, []);

    const checkAuth = async () => {
        try {
            const response = await fetch('/api/auth/me', {
                method: 'GET',
                credentials: 'include',
            });

            if (response.ok) {
                const userData = await response.json();
                setUser(userData.user);
            } else {
                setUser(null);
            }
        } catch (error) {
            console.error('Erro ao verificar autenticação:', error);
            setUser(null);
        } finally {
            setLoading(false);
        }
    };

    const login = async (email: string, password: string) => {
        try {
            const response = await fetch('/api/auth/login', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                credentials: 'include',
                body: JSON.stringify({ email, password }),
            });

            const data = await response.json();

            if (response.ok) {
                setUser(data.user);
                router.push('/');
                return { success: true };
            } else {
                return { success: false, error: data.error || 'Erro no login' };
            }
        } catch (error) {
            console.error('Erro no login:', error);
            return { success: false, error: 'Erro de conexão' };
        }
    };

    const register = async (email: string, password: string, name?: string) => {
        try {
            const response = await fetch('/api/auth/register', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                credentials: 'include',
                body: JSON.stringify({ email, password, name }),
            });

            const data = await response.json();

            if (response.ok) {
                setUser(data.user);
                router.push('/');
                return { success: true };
            } else {
                return { success: false, error: data.error || 'Erro no registro' };
            }
        } catch (error) {
            console.error('Erro no registro:', error);
            return { success: false, error: 'Erro de conexão' };
        }
    };

    const logout = async () => {
        try {
            await fetch('/api/auth/logout', {
                method: 'POST',
                credentials: 'include',
            });
        } catch (error) {
            console.error('Erro no logout:', error);
        } finally {
            setUser(null);
            router.push('/');
        }
    };

    const isAuthenticated = !!user;
    const isAdmin = user?.role === 'ADMIN';
    const canEdit = user?.role === 'ADMIN' || user?.role === 'EDITOR';

    const value: AuthContextType = {
        user,
        loading,
        login,
        register,
        logout,
        isAuthenticated,
        isAdmin,
        canEdit,
    };

    return (
        <AuthContext.Provider value= { value } >
        { children }
        </AuthContext.Provider>
    );
} 