import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function fixSpotifyPosts() {
    console.log('üîß Corrigindo posts com URL do Spotify...');

    try {
        // Buscar posts que t√™m URL do Spotify mas n√£o t√™m hasAudio marcado
        const postsToFix = await prisma.post.findMany({
            where: {
                spotifyPlaylistUrl: {
                    not: null,
                },
                hasAudio: false,
            },
            select: {
                id: true,
                title: true,
                spotifyPlaylistUrl: true,
                hasAudio: true,
            },
        });

        console.log(`üìã Encontrados ${postsToFix.length} posts para corrigir:`);

        if (postsToFix.length === 0) {
            console.log('‚úÖ Nenhum post precisa ser corrigido');
            return;
        }

        // Listar posts que ser√£o corrigidos
        postsToFix.forEach(post => {
            console.log(`  - "${post.title}" - Spotify: ${post.spotifyPlaylistUrl}`);
        });

        // Atualizar cada post
        for (const post of postsToFix) {
            try {
                await prisma.post.update({
                    where: { id: post.id },
                    data: {
                        hasAudio: true,
                    },
                });

                console.log(`‚úÖ Post "${post.title}" corrigido - hasAudio definido como true`);
            } catch (error) {
                console.error(`‚ùå Erro ao corrigir post "${post.title}":`, error);
            }
        }

        console.log(`üéâ Corre√ß√£o conclu√≠da. ${postsToFix.length} posts atualizados.`);

    } catch (error) {
        console.error('üî• Erro ao corrigir posts:', error);
    } finally {
        await prisma.$disconnect();
    }
}

async function listSpotifyPosts() {
    console.log('üìã Listando posts com URL do Spotify:');

    try {
        const spotifyPosts = await prisma.post.findMany({
            where: {
                spotifyPlaylistUrl: {
                    not: null,
                },
            },
            select: {
                id: true,
                title: true,
                spotifyPlaylistUrl: true,
                hasAudio: true,
                published: true,
            },
            orderBy: {
                createdAt: 'desc',
            },
        });

        if (spotifyPosts.length === 0) {
            console.log('üìÖ Nenhum post com URL do Spotify encontrado');
            return;
        }

        console.log(`üìÖ Encontrados ${spotifyPosts.length} posts com URL do Spotify:`);
        spotifyPosts.forEach(post => {
            const status = post.published ? '‚úÖ Publicado' : '‚è∞ Rascunho';
            const audio = post.hasAudio ? 'üéµ' : 'üîá';

            console.log(`  ${audio} "${post.title}" (${status})`);
            console.log(`    Spotify: ${post.spotifyPlaylistUrl}`);
            console.log(`    Has Audio: ${post.hasAudio}`);
            console.log('');
        });

    } catch (error) {
        console.error('‚ùå Erro ao listar posts do Spotify:', error);
    } finally {
        await prisma.$disconnect();
    }
}

async function main() {
    const command = process.argv[2];

    console.log('üîß Script de corre√ß√£o de posts do Spotify');

    try {
        switch (command) {
            case 'fix':
                await fixSpotifyPosts();
                break;
            case 'list':
                await listSpotifyPosts();
                break;
            default:
                console.log('üìñ Comandos dispon√≠veis:');
                console.log('  node scripts/fix-spotify-posts.js fix  - Corrigir posts com Spotify');
                console.log('  node scripts/fix-spotify-posts.js list - Listar posts com Spotify');
                break;
        }
    } catch (error) {
        console.error('üî• Erro no script de corre√ß√£o:', error);
    }
}

main()
    .then(() => {
        console.log('‚úÖ Script de corre√ß√£o conclu√≠do');
        process.exit(0);
    })
    .catch((error) => {
        console.error('‚ùå Erro no script de corre√ß√£o:', error);
        process.exit(1);
    }); 