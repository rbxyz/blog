import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function testViews() {
    try {
        console.log('üß™ Testando sistema de visualiza√ß√µes...\n');

        // Buscar um post para testar
        const post = await prisma.post.findFirst({
            where: { published: true },
            select: { id: true, title: true, slug: true, viewCount: true },
        });

        if (!post) {
            console.log('‚ùå Nenhum post publicado encontrado para teste');
            return;
        }

        console.log(`üìù Post selecionado: ${post.title}`);
        console.log(`üîó Slug: ${post.slug}`);
        console.log(`üëÅÔ∏è  Visualiza√ß√µes atuais: ${post.viewCount}\n`);

        // Simular m√∫ltiplas visualiza√ß√µes da mesma sess√£o
        const sessionId = 'test-session-456';

        console.log('üîÑ Simulando visualiza√ß√µes da mesma sess√£o...');

        for (let i = 0; i < 3; i++) {
            try {
                // Usar transa√ß√£o para simular a fun√ß√£o recordPostView
                await prisma.$transaction(async (tx) => {
                    // Verificar se j√° existe uma visualiza√ß√£o para esta sess√£o
                    const existingView = await tx.postView.findFirst({
                        where: {
                            postId: post.id,
                            sessionId: sessionId,
                        },
                    });

                    if (existingView) {
                        console.log(`‚ö†Ô∏è  Visualiza√ß√£o ${i + 1} j√° existe (esperado)`);
                        return;
                    }

                    // Criar nova visualiza√ß√£o
                    await tx.postView.create({
                        data: {
                            postId: post.id,
                            sessionId: sessionId,
                            ipAddress: '127.0.0.1',
                            userAgent: 'Test Browser',
                        },
                    });

                    // Atualizar o contador total de visualiza√ß√µes
                    await tx.post.update({
                        where: { id: post.id },
                        data: { viewCount: { increment: 1 } },
                    });

                    console.log(`‚úÖ Visualiza√ß√£o ${i + 1} registrada`);
                });
            } catch (error) {
                console.log(`‚ö†Ô∏è  Visualiza√ß√£o ${i + 1} j√° existe (esperado)`);
            }
        }

        // Simular visualiza√ß√µes de sess√µes diferentes
        console.log('\nüîÑ Simulando visualiza√ß√µes de sess√µes diferentes...');

        for (let i = 0; i < 5; i++) {
            const uniqueSessionId = `test-session-${Date.now()}-${i}`;

            try {
                // Usar transa√ß√£o para simular a fun√ß√£o recordPostView
                await prisma.$transaction(async (tx) => {
                    // Verificar se j√° existe uma visualiza√ß√£o para esta sess√£o
                    const existingView = await tx.postView.findFirst({
                        where: {
                            postId: post.id,
                            sessionId: uniqueSessionId,
                        },
                    });

                    if (existingView) {
                        console.log(`‚ö†Ô∏è  Visualiza√ß√£o √∫nica ${i + 1} j√° existe`);
                        return;
                    }

                    // Criar nova visualiza√ß√£o
                    await tx.postView.create({
                        data: {
                            postId: post.id,
                            sessionId: uniqueSessionId,
                            ipAddress: `192.168.1.${i + 1}`,
                            userAgent: `Test Browser ${i + 1}`,
                        },
                    });

                    // Atualizar o contador total de visualiza√ß√µes
                    await tx.post.update({
                        where: { id: post.id },
                        data: { viewCount: { increment: 1 } },
                    });

                    console.log(`‚úÖ Visualiza√ß√£o √∫nica ${i + 1} registrada`);
                });
            } catch (error) {
                console.error(`‚ùå Erro na visualiza√ß√£o √∫nica ${i + 1}:`, error.message);
            }
        }

        // Verificar resultados
        console.log('\nüìä Verificando resultados...');

        const updatedPost = await prisma.post.findUnique({
            where: { id: post.id },
            select: { viewCount: true },
        });

        const totalViews = await prisma.postView.count({
            where: { postId: post.id },
        });

        console.log(`üëÅÔ∏è  Visualiza√ß√µes totais: ${updatedPost?.viewCount}`);
        console.log(`üî¢ Registros √∫nicos: ${totalViews}`);

        // Listar todas as visualiza√ß√µes
        const views = await prisma.postView.findMany({
            where: { postId: post.id },
            select: {
                id: true,
                sessionId: true,
                ipAddress: true,
                userAgent: true,
                createdAt: true,
            },
            orderBy: { createdAt: 'desc' },
        });

        console.log('\nüìã Lista de visualiza√ß√µes:');
        views.forEach((view, index) => {
            console.log(`${index + 1}. Sess√£o: ${view.sessionId.substring(0, 20)}... | IP: ${view.ipAddress} | Data: ${view.createdAt.toLocaleString()}`);
        });

    } catch (error) {
        console.error('üí• Erro no teste:', error);
    } finally {
        await prisma.$disconnect();
    }
}

testViews(); 